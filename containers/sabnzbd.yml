#!/bin/bash
#
# Title:      PlexGuide (Reference Title File)
# Author(s):  Admin9705
# URL:        https://plexguide.com - http://github.plexguide.com
# GNU:        General Public License v3.0
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:
    # FACTS #######################################################################

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'sabnzbd'
        intport: '8080'
        extport: '8080'
        image: 'linuxserver/sabnzbd'

    # CORE (MANDATORY) ############################################################
    - name: 'Including cron job'
      include_tasks: '/opt/plexguide/containers/_core.yml'

    # MIGRATIONS (REMOVE SECTION ON MARCH 1st) #############################################################
    - name: 'Check for old volumes'
      stat:
        path: '{{path.stdout}}/sab'
      register: oldcheck

    - name: 'Migrations'
      block:
        - name: 'Creating new downloads location'
          command: 'mkdir -p {{path.stdout}}/downloads/{{pgrole}}'

        - name: 'Creating new incomplete downloads location'
          command: 'mkdir -p {{path.stdout}}/incomplete/{{pgrole}}'

        - name: 'Moving downloads to new location'
          command: 'mv {{path.stdout}}/sab/downloads/complete/* {{path.stdout}}/downloads/{{pgrole}}/'

        - name: 'Moving incomplete downloads to new location'
          command: 'mv {{path.stdout}}/sab/downloads/incomplete/* {{path.stdout}}/incomplete/{{pgrole}}/'

        - name: Remove old download directory
          file:
            state: absent
            path: '{{path.stdout}}/sab'

        # - name: Remove old directory
        #   file:
        #     state: absent
        #     path: "{{path.stdout}}/sabnzbd"

      when: oldcheck.stat.exists
      ignore_errors: yes

    - name: 'Chown NZB Owners'
      shell: 'chown -R 1000:1000 {{path.stdout}}/downloads/{{pgrole}}'

    - name: 'SAB Permissions Set'
      shell: 'chmod -R 775 {{path.stdout}}/downloads/{{pgrole}}'

    - name: 'Chown NZB Owners'
      shell: 'chown -R 1000:1000 {{path.stdout}}/incomplete/{{pgrole}}'

    - name: 'SAB Permissions Set'
      shell: 'chmod -R 775 {{path.stdout}}/incomplete/{{pgrole}}'

    - name: 'Ini Check'
      stat:
        path: /opt/appdata/sabnzbd/sabnzbd.ini
      register: inicheck

    # LABELS ######################################################################

    - name: 'Adding Traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          traefik.port: '{{intport}}'
          traefik.frontend.rule: 'Host:{{pgrole}}.{{domain.stdout}},{{tldset}}'
          traefik.frontend.auth.forward.address: '{{gauth}}'

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          - '/etc/localtime:/etc/localtime:ro'
          - '/opt/appdata/{{pgrole}}:/config'
          - '{{path.stdout}}:{{path.stdout}}'

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: 1000
          PGID: 1000

    # MAIN DEPLOYMENT #############################################################

    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        published_ports:
          - '{{ports.stdout}}{{extport}}:{{intport}}'
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: always
        networks:
          - name: plexguide
            aliases:
              - '{{pgrole}}'
        state: started
        labels: '{{pg_labels}}'

    # ENDING FOR SABNZBD ###########################################################

    - name: 'Waiting for {{pgrole}} to initialize'
      wait_for:
        path: '/opt/appdata/{{pgrole}}/sabnzbd.ini'
        state: present

    - name: 'Configuring {{pgrole}} for first time use'
      block:
        - name: 'Stopping {{pgrole}}'
          docker_container:
            name: '{{pgrole}}'
            state: stopped

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'download_dir = Downloads/incomplete'
            replace: 'download_dir = {{path.stdout}}/incomplete/{{pgrole}}'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'complete_dir = Downloads/complete'
            replace: 'complete_dir = {{path.stdout}}/downloads/{{pgrole}}'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'html_login = ""'
            replace: 'html_login = 1'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'username = ""'
            replace: 'username = plex'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'password = ""'
            replace: 'password = guide'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'host_whitelist ='
            replace: 'host_whitelist = sabnzbd.{{domain.stdout}},'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'direct_unpack = 0'
            replace: 'direct_unpack = 1'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'ignore_samples = 0'
            replace: 'ignore_samples = 1'

        ## remove unwanted extensions
        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'unwanted_extensions = ,'
            replace: 'unwanted_extensions = exe, com, bat, sh'

        ## ignore and cleanup the following files
        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'cleanup_list = ,'
            replace: 'cleanup_list = nfo, exe, com, bat, txt, doc, xls, xlxs, docx, doc, jpg, jeg, gif, png'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'action_on_unwanted_extensions = 0'
            replace: 'action_on_unwanted_extensions = 2'

        ## aborts encrypted rar rather than pausing
        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'pause_on_pwrar = 1'
            replace: 'pause_on_pwrar = 2'

        ## try a new nzb if it fails
        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'new_nzb_on_failure = 0'
            replace: 'new_nzb_on_failure = 1'

        ## replace dots with space
        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'replace_dots = 0'
            replace: 'replace_dots = 1'

        ## flat_unpack
        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'flat_unpack = 0'
            replace: 'flat_unpack = 1'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'script_dir ='
            replace: 'script_dir = scripts'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'dirscan_dir ='
            replace: 'dirscan_dir = {{path.stdout}}/nzb/watch'

        - replace:
            path: /opt/appdata/sabnzbd/sabnzbd.ini
            regexp: 'download_free ='
            replace: 'download_free = 25G'

        - name: Restart Container
          docker_container:
            name: '{{pgrole}}'
            state: started

        - name: 'Chown download folder'
          shell: 'chown -R 1000:1000 {{path.stdout}}/downloads/{{pgrole}}/'

        - name: 'Chmod download folder'
          shell: 'chmod -R 775 {{path.stdout}}/downloads/{{pgrole}}/'

      when: not inicheck.stat.exists
